package cz.smartfine.pc.view;

import cz.smartfine.model.MobileDeviceDB;
import cz.smartfine.networklayer.model.pc.QueryList;
import cz.smartfine.networklayer.model.pc.QueryState;
import cz.smartfine.pc.SFPCClient;
import cz.smartfine.pc.networklayer.business.listeners.IQueryProtocolListener;
import cz.smartfine.pc.networklayer.dataprotocols.QueryProtocol;
import cz.smartfine.pc.query.DeviceListLoader;
import cz.smartfine.pc.query.IDeviceListLoaderListener;
import cz.smartfine.pc.query.IdCreator;
import cz.smartfine.pc.query.QueryParameterBuilder;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Panel pro smazání zařízení z databáze.
 *
 * @author Pavel Brož
 */
public class DeleteDevicePanel extends javax.swing.JPanel implements IQueryProtocolListener, IDeviceListLoaderListener {

    /**
     * Protokol pro dotazy.
     */
    private QueryProtocol queryProtocol;
    /**
     * Seznam zařízení získaný ze serveru.
     */
    private List<MobileDeviceDB> devicesList;
    /**
     * Pomocný objekt, který načítá seznam zařízení.
     */
    private DeviceListLoader devListLoader;
    /**
     * Objekt který byl jako poslední určen ke smazání, ale zatím ze serveru nepřišlo potvrzení.
     */
    private MobileDeviceDB lastDelDev;

    //================================================== KONSTRUKTORY & DESTRUKTORY ==================================================//
    
    /**
     * Konstruktor.
     */
    public DeleteDevicePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbDevs = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        butDelete = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        cmbDevs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDevsActionPerformed(evt);
            }
        });

        jLabel1.setText(SFPCClient.getApplication().getLocalization().getString("deldevpanel.devsfield.text"));

        butDelete.setText(SFPCClient.getApplication().getLocalization().getString("deldevpanel.delbut.text"));
        butDelete.setEnabled(false);
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDesc)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbDevs, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butDelete)))
                .addGap(0, 25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDevs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(butDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDesc)
                .addContainerGap(364, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //================================================== UI HANDLERY ==================================================//
    
    /**
     * Smaže vybrané zařízení.
     * @param evt 
     */
    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(null, SFPCClient.getApplication().getLocalization().getString("deldevpanel.delete.question.msg"), SFPCClient.getApplication().getLocalization().getString("deldevpanel.delete.question.title"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            lastDelDev = ((MobileDeviceDB) cmbDevs.getSelectedItem());

            queryProtocol.setQueryProtocolListener(this);
            queryProtocol.executeQuery(IdCreator.getID(), QueryList.QUERY_DELETE_DEVICE, new QueryParameterBuilder().putInt("devid", lastDelDev.getId()).getParametersString());
        }
    }//GEN-LAST:event_butDeleteActionPerformed

    /**
     * Načtení panelu.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        queryProtocol = new QueryProtocol(SFPCClient.getApplication().getConnectionProvider().getNetworkInterface(), this); //vytvoření protokolu

        devListLoader = new DeviceListLoader(queryProtocol);
        devListLoader.loadDeviceList(this);
    }//GEN-LAST:event_formComponentShown

    /**
     * Výběr zařízení z combo boxu.
     * @param evt 
     */
    private void cmbDevsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDevsActionPerformed
        MobileDeviceDB selMD = (MobileDeviceDB) cmbDevs.getSelectedItem();
        //zobrazí popisek k zařízení//
        if (selMD != null) {
            lblDesc.setText(selMD.getDescription());
        }
    }//GEN-LAST:event_cmbDevsActionPerformed

    //================================================== UI PRVKY ==================================================//
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDelete;
    private javax.swing.JComboBox cmbDevs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDesc;
    // End of variables declaration//GEN-END:variables

    //================================================== PRIVÁTNÍ METODY ==================================================//
    
    /**
     * Připravý combo box pro zobrazení zařízení.
     */
    private void prepareDeviceCombo() {
        cmbDevs.removeAllItems();

        for (MobileDeviceDB dev : devicesList) {
            cmbDevs.addItem(dev);
        }

        butDelete.setEnabled(true);
    }

    //================================================== HANDLERY PROTOKOLŮ ==================================================//
    
    @Override
    public void onConnectionTerminated() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.conterm.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.conterm.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    @Override
    public void onMessageSent() {
    }

    @Override
    public void onQueryResultReply(int id, QueryState state, Object result) {
        class ResultResender implements Runnable {

            private Object result;

            public ResultResender(Object result) {
                this.result = result;
            }

            @Override
            public void run() {
                if (result != null) {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.notdeleted.msg") + (String) result,
                            SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.notdeleted.title"), JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.notdeleted.msg"),
                            SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.notdeleted.title"), JOptionPane.ERROR_MESSAGE);
                }

            }
        }

        if (state == QueryState.QUERY_OK) {
            javax.swing.SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    devicesList.remove(lastDelDev);
                    cmbDevs.removeItem(lastDelDev);
                    lastDelDev = null;

                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("deldevpanel.deleted.msg"),
                            SFPCClient.getApplication().getLocalization().getString("deldevpanel.deleted.title"), JOptionPane.INFORMATION_MESSAGE);
                }
            });
        } else {
            javax.swing.SwingUtilities.invokeLater(new ResultResender(result));
        }
    }

    @Override
    public void onDeviceListReceived(List<MobileDeviceDB> devices) {
        class DeviceListResender implements Runnable {

            private List<MobileDeviceDB> devices;

            public DeviceListResender(List<MobileDeviceDB> devices) {
                this.devices = devices;
            }

            @Override
            public void run() {
                if (devListLoader != null) {
                    devListLoader.disconnectProtocol();
                }
                devicesList = this.devices;

                prepareDeviceCombo();
            }
        }
        javax.swing.SwingUtilities.invokeLater(new DeviceListResender(devices));
    }

    @Override
    public void onErrorReceived(String message) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (devListLoader != null) {
                    devListLoader.disconnectProtocol();
                }
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.conterm.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.deldevpanel.conterm.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}

package cz.smartfine.pc.view;

import cz.smartfine.networklayer.model.pc.QueryList;
import cz.smartfine.networklayer.model.pc.QueryState;
import cz.smartfine.pc.SFPCClient;
import cz.smartfine.pc.networklayer.business.listeners.IQueryProtocolListener;
import cz.smartfine.pc.networklayer.dataprotocols.QueryProtocol;
import cz.smartfine.pc.query.IdCreator;
import cz.smartfine.pc.query.QueryParameterBuilder;
import cz.smartfine.pc.view.util.UIValidator;
import javax.swing.JOptionPane;

/**
 * Panel pro registraci mobilního zařízení do databáze.
 *
 * @author Pavel Brož
 */
public class RegisterDevicePanel extends javax.swing.JPanel implements IQueryProtocolListener {

    /**
     * Protokol pro dotazy.
     */
    private QueryProtocol queryProtocol;

    //================================================== KONSTRUKTORY & DESTRUKTORY ==================================================//
    /**
     * Konstruktor.
     */
    public RegisterDevicePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtImei = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDesc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        butSave = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText(SFPCClient.getApplication().getLocalization().getString("regdevpanel.imeifield.text"));

        jLabel2.setText(SFPCClient.getApplication().getLocalization().getString("regdevpanel.namefield.text"));

        jLabel3.setText(SFPCClient.getApplication().getLocalization().getString("regdevpanel.descfield.text"));

        butSave.setText(SFPCClient.getApplication().getLocalization().getString("regdevpanel.savebut.text"));
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(butSave)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtImei, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addComponent(txtName)
                            .addComponent(txtDesc))))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImei, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butSave)
                .addContainerGap(188, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //================================================== UI HANDLERY ==================================================//
    
    /**
     * Ukládá zařízení.
     * @param evt 
     */
    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed
        if (UIValidator.checkDeviceFormat(txtImei.getText(), txtName.getText(), txtDesc.getText())) {
            QueryParameterBuilder qpb = new QueryParameterBuilder();
            qpb.putString("imei", txtImei.getText());
            qpb.putString("name", txtName.getText());
            qpb.putString("description", txtDesc.getText());

            queryProtocol.setQueryProtocolListener(this);
            queryProtocol.executeQuery(IdCreator.getID(), QueryList.QUERY_REGISTER_NEW_DEVICE, qpb.getParametersString());
        } else {
            JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.wrongformat.msg"),
                    SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.wrongformat.title"), JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_butSaveActionPerformed

    /**
     * Zobrazení panelu.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        queryProtocol = new QueryProtocol(SFPCClient.getApplication().getConnectionProvider().getNetworkInterface(), this); //vytvoření protokolu
    }//GEN-LAST:event_formComponentShown

    //================================================== UI PRVKY ==================================================//
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtImei;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    //================================================== HANDLERY PROTOKOLŮ ==================================================//
    
    @Override
    public void onConnectionTerminated() {
    }

    @Override
    public void onMessageSent() {
    }

    @Override
    public void onQueryResultReply(int id, QueryState state, Object result) {
        class ResultResender implements Runnable {

            private Object result;

            public ResultResender(Object result) {
                this.result = result;
            }

            @Override
            public void run() {
                if (result != null) {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.notsaved.msg") + (String) result,
                            SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.notsaved.title"), JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.notsaved.msg"),
                            SFPCClient.getApplication().getLocalization().getString("exception.regdevpanel.notsaved.title"), JOptionPane.ERROR_MESSAGE);
                }

            }
        }

        if (state == QueryState.QUERY_OK) {
            javax.swing.SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("regdevpanel.saved.msg"),
                            SFPCClient.getApplication().getLocalization().getString("regdevpanel.saved.title"), JOptionPane.INFORMATION_MESSAGE);
                }
            });
        } else {
            javax.swing.SwingUtilities.invokeLater(new ResultResender(result));
        }
    }
}

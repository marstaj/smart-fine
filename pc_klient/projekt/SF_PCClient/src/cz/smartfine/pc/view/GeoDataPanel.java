package cz.smartfine.pc.view;

import cz.smartfine.model.PolicemanDB;
import cz.smartfine.model.WaypointDB;
import cz.smartfine.networklayer.model.pc.QueryList;
import cz.smartfine.networklayer.model.pc.QueryState;
import cz.smartfine.pc.SFPCClient;
import cz.smartfine.pc.networklayer.business.listeners.IQueryProtocolListener;
import cz.smartfine.pc.networklayer.dataprotocols.QueryProtocol;
import cz.smartfine.pc.query.IPolicemanListLoaderListener;
import cz.smartfine.pc.query.IdCreator;
import cz.smartfine.pc.query.PolicemanListLoader;
import cz.smartfine.pc.query.QueryParameterBuilder;
import java.util.*;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import org.jdesktop.swingx.mapviewer.Waypoint;
import org.jdesktop.swingx.mapviewer.WaypointPainter;

/**
 * Panel určený pro zobrazení geolokačních dat.
 *
 * @author Pavel Brož
 */
public class GeoDataPanel extends javax.swing.JPanel implements IQueryProtocolListener, IPolicemanListLoaderListener {

    /**
     * Protokol pro získávání dat.
     */
    private QueryProtocol queryProtocol;
    /**
     * Seznam policistů získaný ze serveru.
     */
    private List<PolicemanDB> policemanList;
    /**
     * Pomocný objekt, který načítá seznam policistů.
     */
    private PolicemanListLoader polListLoader;
    /**
     * Seznam waypointů získaný ze serveru. Seznam je udržován protože obsahuje čas zaznamenání.
     */
    private List<WaypointDB> serverWPList;
    /**
     * Seznam waypointů (konvertovaný ze serverových) určený pro vykreslení do mapy.
     */
    private List<Waypoint> mapWPList;
    /**
     * Waypointy, které jsou aktuálně zobrazené.
     */
    private Set<Waypoint> currentWP;
    /**
     * Třída pro kreslení waypointů do mapy.
     */
    private WaypointPainter wpPainter = new WaypointPainter();
    /**
     * Výchozí souřadnice, kterou zobrazí mapa. (geografický střed ČR)
     */
    private final GeoPosition MAP_START_POSITION = new GeoPosition(49, 44, 37.5, 15, 20, 19.1);

    //================================================== KONSTRUKTORY & DESTRUKTORY ==================================================//
    
    /**
     * Konstruktor.
     */
    public GeoDataPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapMap = new org.jdesktop.swingx.JXMapKit();
        jLabel3 = new javax.swing.JLabel();
        cmbPolicemen = new javax.swing.JComboBox();
        dateUntil = new com.toedter.calendar.JDateChooser();
        butLoadGeoData = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dateSince = new com.toedter.calendar.JDateChooser();
        sldTimeline = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        mapMap.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        mapMap.setAddressLocation(MAP_START_POSITION);
        mapMap.setAddressLocationShown(false);

        jLabel3.setText(SFPCClient.getApplication().getLocalization().getString("geopanel.policeman.text"));

        butLoadGeoData.setText(SFPCClient.getApplication().getLocalization().getString("geopanel.loadbut.text"));
        butLoadGeoData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLoadGeoDataActionPerformed(evt);
            }
        });

        jLabel4.setText(SFPCClient.getApplication().getLocalization().getString("geopanel.since.text"));

        jLabel5.setText(SFPCClient.getApplication().getLocalization().getString("geopanel.until.text"));

        sldTimeline.setToolTipText("");
        sldTimeline.setValue(0);
        sldTimeline.setEnabled(false);
        sldTimeline.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldTimelineStateChanged(evt);
            }
        });

        jLabel1.setText(SFPCClient.getApplication().getLocalization().getString("geopanel.timeline.text"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sldTimeline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbPolicemen, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateSince, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateUntil, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(butLoadGeoData)
                                .addGap(0, 353, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPolicemen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(butLoadGeoData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(dateSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sldTimeline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapMap, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //================================================== UI HANDLERY ==================================================//
    
    /**
     * Načte geolokační záznamy.
     * @param evt 
     */
    private void butLoadGeoDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLoadGeoDataActionPerformed
        if (dateSince.getDate() != null && dateUntil.getDate() != null && cmbPolicemen.getSelectedItem() != null
                && (dateSince.getDate().before(dateUntil.getDate()) || dateSince.getDate().equals(dateUntil.getDate()))) {
            loadGeoData();
        } else {
            JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.geopanel.invalidinp.msg"),
                    SFPCClient.getApplication().getLocalization().getString("exception.geopanel.invalidinp.title"), JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_butLoadGeoDataActionPerformed

    /**
     * Zobrazení panelu.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //přednastaví dnešní datum//
        if (dateSince.getDate() == null) {
            dateSince.setDate(new Date());
        }
        //přednastaví dnešní datum//
        if (dateUntil.getDate() == null) {
            dateUntil.setDate(new Date());
        }

        queryProtocol = new QueryProtocol(SFPCClient.getApplication().getConnectionProvider().getNetworkInterface(), this); //vytvoření protokolu

        //načte se seznam policistů z DB//
        polListLoader = new PolicemanListLoader(queryProtocol);
        polListLoader.loadPolicemanList(this);

    }//GEN-LAST:event_formComponentShown

    /**
     * Pohyb jezdcem slidebaru.
     * @param evt 
     */
    private void sldTimelineStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldTimelineStateChanged
        if (!sldTimeline.getValueIsAdjusting()) {
            currentWP = new HashSet<>();
            for (int i = 0; i < sldTimeline.getValue(); i++) {
                currentWP.add(mapWPList.get(i));
            }
            wpPainter.setWaypoints(currentWP);
            mapMap.getMainMap().setOverlayPainter(wpPainter);
        }
    }//GEN-LAST:event_sldTimelineStateChanged

    //================================================== UI PRVKY ==================================================//
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butLoadGeoData;
    private javax.swing.JComboBox cmbPolicemen;
    private com.toedter.calendar.JDateChooser dateSince;
    private com.toedter.calendar.JDateChooser dateUntil;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private org.jdesktop.swingx.JXMapKit mapMap;
    private javax.swing.JSlider sldTimeline;
    // End of variables declaration//GEN-END:variables

    //================================================== PRIVÁTNÍ METODY ==================================================//
    
    /**
     * Načte ze serveru geolokační data za určené období.
     */
    private void loadGeoData() {
        QueryParameterBuilder qpb = new QueryParameterBuilder();
        qpb.putInt("badgenumber", ((PolicemanDB) cmbPolicemen.getSelectedItem()).getBadgeNumber());
        qpb.putLong("since", dateSince.getDate().getTime());
        qpb.putLong("until", dateUntil.getDate().getTime());

        queryProtocol.setQueryProtocolListener(this);
        queryProtocol.executeQuery(IdCreator.getID(), QueryList.QUERY_GET_GEOLOCATION_DATA, qpb.getParametersString());
    }

    /**
     * Připravý combo box pro zobrazení seznamu policistů.
     */
    private void preparePolicemanCombo() {
        cmbPolicemen.removeAllItems();
        for (PolicemanDB policeman : policemanList) {
            cmbPolicemen.addItem(policeman);
        }
    }

    /**
     * Připravý nově příchozí data ze serveru pro zobrazení na mapě.
     *
     * @param waypoints
     */
    private void setNewData(List<WaypointDB> waypoints) {
        serverWPList = waypoints;
        mapWPList = new ArrayList<Waypoint>();
        for (WaypointDB waypointDB : waypoints) {
            mapWPList.add(new Waypoint(waypointDB.getLatitude(), waypointDB.getLongtitude()));
        }

        sldTimeline.setValue(0);
        sldTimeline.setMaximum(waypoints.size());
        sldTimeline.setEnabled(true);
    }

    //================================================== HANDLERY PROTOKOLŮ ==================================================//
    
    @Override
    public void onConnectionTerminated() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.geopanel.conterm.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.geopanel.conterm.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    @Override
    public void onMessageSent() {}

    @Override
    public void onQueryResultReply(int id, QueryState state, Object result) {
        class ResultResender implements Runnable {

            private Object result;

            public ResultResender(Object result) {
                this.result = result;
            }

            @Override
            public void run() {
                setNewData((List<WaypointDB>) this.result);

                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("geopanel.loaded.msg"),
                        SFPCClient.getApplication().getLocalization().getString("geopanel.loaded.title"), JOptionPane.INFORMATION_MESSAGE);
            }
        }

        if (state == QueryState.QUERY_OK) {
            javax.swing.SwingUtilities.invokeLater(new ResultResender(result));
        } else {
            javax.swing.SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.geopanel.querygeoerr.msg"),
                            SFPCClient.getApplication().getLocalization().getString("exception.geopanel.querygeoerr.title"), JOptionPane.ERROR_MESSAGE);
                }
            });
        }
    }

    @Override
    public void onPolicemanListReceived(List<PolicemanDB> policemen) {

        class PolicemenListResender implements Runnable {

            private List<PolicemanDB> policemen;

            public PolicemenListResender(List<PolicemanDB> policemen) {
                this.policemen = policemen;
            }

            @Override
            public void run() {
                if (polListLoader != null) {
                    polListLoader.disconnectProtocol();
                }
                policemanList = this.policemen;

                preparePolicemanCombo();
            }
        }
        javax.swing.SwingUtilities.invokeLater(new PolicemenListResender(policemen));
    }

    @Override
    public void onErrorReceived(String message) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (polListLoader != null) {
                    polListLoader.disconnectProtocol();
                }
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.geopanel.conterm.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.geopanel.conterm.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}

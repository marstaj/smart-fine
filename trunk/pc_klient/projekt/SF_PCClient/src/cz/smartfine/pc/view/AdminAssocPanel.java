package cz.smartfine.pc.view;

import cz.smartfine.model.MobileDeviceDB;
import cz.smartfine.model.PolicemanDB;
import cz.smartfine.networklayer.model.pc.QueryList;
import cz.smartfine.networklayer.model.pc.QueryState;
import cz.smartfine.pc.SFPCClient;
import cz.smartfine.pc.networklayer.business.listeners.IQueryProtocolListener;
import cz.smartfine.pc.networklayer.dataprotocols.QueryProtocol;
import cz.smartfine.pc.query.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * Panel pro administraci asociací mezi zařízeními a policisty.
 *
 * @author Pavel Brož
 */
public class AdminAssocPanel extends javax.swing.JPanel implements IQueryProtocolListener, IDeviceListLoaderListener, IPolicemanListLoaderListener {

    /**
     * Dotazovací protokol.
     */
    private QueryProtocol queryProtocol;
    /**
     * Seznam dostupných zařízení získaný ze serveru.
     */
    private List<MobileDeviceDB> devicesList;
    /**
     * Pomocný objekt, který načítá seznam zařízení.
     */
    private DeviceListLoader devListLoader;
    /**
     * Seznam policistů získaný ze serveru.
     */
    private List<PolicemanDB> policemanList;
    /**
     * Pomocný objekt, který načítá seznam policistů.
     */
    private PolicemanListLoader polListLoader;
    /**
     * Reference na tento panel.
     */
    private AdminAssocPanel thisPanel;
    /**
     * Model, který udržuje asociace, pro zobrazení v JListu
     */
    private DefaultListModel assocListModel = new DefaultListModel();
    /**
     * Model, který udržuje dostupné policisty, pro zobrazení v JListu
     */
    private DefaultListModel polListModel = new DefaultListModel();

    //================================================== KONSTRUKTORY & DESTRUKTORY ==================================================//
    /**
     * Konstruktor.
     */
    public AdminAssocPanel() {
        thisPanel = this;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbDevs = new javax.swing.JComboBox();
        butSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAssociatedPol = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAvailablePol = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        butAdd = new javax.swing.JButton();
        butRemove = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        cmbDevs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDevsActionPerformed(evt);
            }
        });

        butSave.setText(SFPCClient.getApplication().getLocalization().getString("assocpanel.savebut.text"));
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });

        lstAssociatedPol.setModel(assocListModel);
        jScrollPane1.setViewportView(lstAssociatedPol);

        lstAvailablePol.setModel(polListModel);
        jScrollPane2.setViewportView(lstAvailablePol);

        jLabel1.setText(SFPCClient.getApplication().getLocalization().getString("assocpanel.assoclist.text"));

        jLabel2.setText(SFPCClient.getApplication().getLocalization().getString("assocpanel.availlist.text"));

        butAdd.setText(SFPCClient.getApplication().getLocalization().getString("assocpanel.addbut.text"));
        butAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddActionPerformed(evt);
            }
        });

        butRemove.setText(SFPCClient.getApplication().getLocalization().getString("assocpanel.rembut.text"));
        butRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(butAdd)
                            .addComponent(butRemove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbDevs, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butSave))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(286, 286, 286)
                                .addComponent(jLabel2)))
                        .addGap(0, 184, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {butAdd, butRemove});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDevs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butRemove)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //================================================== UI HANDLERY ==================================================//
    /**
     * Zobrazení panelu.
     *
     * @param evt
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        queryProtocol = new QueryProtocol(SFPCClient.getApplication().getConnectionProvider().getNetworkInterface(), this); //vytvoření protokolu

        devListLoader = new DeviceListLoader(queryProtocol);
        devListLoader.loadDeviceList(this);
    }//GEN-LAST:event_formComponentShown

    /**
     * Přidání policisty do seznamu asociací.
     *
     * @param evt
     */
    private void butAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddActionPerformed
        if (lstAvailablePol.getSelectedValue() != null) {
            assocListModel.addElement(lstAvailablePol.getSelectedValue());
            polListModel.removeElement(lstAvailablePol.getSelectedValue());
        }
    }//GEN-LAST:event_butAddActionPerformed

    /**
     * Odebrání policisty ze seznamu asociací.
     *
     * @param evt
     */
    private void butRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRemoveActionPerformed
        if (lstAssociatedPol.getSelectedValue() != null) {
            polListModel.addElement(lstAssociatedPol.getSelectedValue());
            assocListModel.removeElement(lstAssociatedPol.getSelectedValue());
        }
    }//GEN-LAST:event_butRemoveActionPerformed

    /**
     * Uložení změn do DB.
     *
     * @param evt
     */
    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed
        ArrayList<Integer> assocId = new ArrayList<Integer>();
        for (Object pol : assocListModel.toArray()) {
            assocId.add(((PolicemanDB) pol).getId());
        }

        QueryParameterBuilder qpb = new QueryParameterBuilder();
        qpb.putInt("devid", ((MobileDeviceDB) cmbDevs.getSelectedItem()).getId());
        qpb.putIntCollection("policemanids", assocId);

        queryProtocol.setQueryProtocolListener(this);
        queryProtocol.executeQuery(IdCreator.getID(), QueryList.QUERY_EDIT_ASSOC, qpb.getParametersString());
    }//GEN-LAST:event_butSaveActionPerformed

    /**
     * Výběr zařízení z combo boxu.
     *
     * @param evt
     */
    private void cmbDevsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDevsActionPerformed
        MobileDeviceDB selDev = (MobileDeviceDB) cmbDevs.getSelectedItem();
        
        if (selDev != null) {
            assocListModel.removeAllElements();
            for (PolicemanDB pol : selDev.getAssociations()) {
                assocListModel.addElement(pol);
            }

            polListModel.removeAllElements();
            //projde policisty a zjistí, kteří nejsou v asociaci, ty pak vloží do seznamu//
            for (PolicemanDB pol : policemanList) {
                boolean present = false;
                for (PolicemanDB assoc : selDev.getAssociations()) {
                    if (pol.getId() == assoc.getId()) {
                        present = true;
                        break;
                    }
                }
                if (!present) {
                    polListModel.addElement(pol);
                }
            }
        }
    }//GEN-LAST:event_cmbDevsActionPerformed
    //================================================== UI PRVKY ==================================================//
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAdd;
    private javax.swing.JButton butRemove;
    private javax.swing.JButton butSave;
    private javax.swing.JComboBox cmbDevs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstAssociatedPol;
    private javax.swing.JList lstAvailablePol;
    // End of variables declaration//GEN-END:variables

    //================================================== PRIVÁTNÍ METODY ==================================================//
    /**
     * Připravý combobox pro zobrazení seznamu zařízení.
     */
    private void prepareCombo() {
        if (policemanList != null && devicesList != null) {
            cmbDevs.removeAllItems();

            for (MobileDeviceDB dev : devicesList) {
                cmbDevs.addItem(dev);
            }
        }
    }

    /**
     * Uloží změny v asociacích do UI.
     */
    private void saveChangesInUI() {
        MobileDeviceDB selDev = (MobileDeviceDB) cmbDevs.getSelectedItem();
        Set<PolicemanDB> selectedPol = new HashSet<PolicemanDB>();
        for (Object pol : assocListModel.toArray()) {
            selectedPol.add((PolicemanDB) pol);
        }
        selDev.setAssociations(selectedPol);
    }

    //================================================== HANDLERY PROTOKOLŮ ==================================================//
    @Override
    public void onConnectionTerminated() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.conterm.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.conterm.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    @Override
    public void onMessageSent() {
    }

    @Override
    public void onQueryResultReply(int id, QueryState state, Object result) {
        class ResultResender implements Runnable {

            private Object result;

            public ResultResender(Object result) {
                this.result = result;
            }

            @Override
            public void run() {
                if (result != null) {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.notsaved.msg") + (String) result,
                            SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.notsaved.title"), JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.notsaved.msg"),
                            SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.notsaved.title"), JOptionPane.ERROR_MESSAGE);
                }

            }
        }

        if (state == QueryState.QUERY_OK) {
            javax.swing.SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    saveChangesInUI();
                    JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("assocpanel.saved.msg"),
                            SFPCClient.getApplication().getLocalization().getString("assocpanel.saved.title"), JOptionPane.INFORMATION_MESSAGE);
                }
            });
        } else {
            javax.swing.SwingUtilities.invokeLater(new ResultResender(result));
        }
    }

    @Override
    public void onDeviceListReceived(List<MobileDeviceDB> devices) {
        class AssocDeviceListResender implements Runnable {

            private List<MobileDeviceDB> devices;

            public AssocDeviceListResender(List<MobileDeviceDB> devices) {
                this.devices = devices;
            }

            @Override
            public void run() {
                if (devListLoader != null) {
                    devListLoader.disconnectProtocol();
                }
                devicesList = (List<MobileDeviceDB>) this.devices;

                polListLoader = new PolicemanListLoader(queryProtocol);
                polListLoader.loadPolicemanList(thisPanel);
            }
        }
        javax.swing.SwingUtilities.invokeLater(new AssocDeviceListResender(devices));
    }

    @Override
    public void onErrorReceived(String message) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (devListLoader != null) {
                    devListLoader.disconnectProtocol();
                }
                if (polListLoader != null) {
                    polListLoader.disconnectProtocol();
                }
                JOptionPane.showMessageDialog(null, SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.servererror.msg"),
                        SFPCClient.getApplication().getLocalization().getString("exception.assocpanel.servererror.title"), JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    @Override
    public void onPolicemanListReceived(List<PolicemanDB> policemen) {
        class PolicemenListResender implements Runnable {

            private List<PolicemanDB> policemen;

            public PolicemenListResender(List<PolicemanDB> policemen) {
                this.policemen = policemen;
            }

            @Override
            public void run() {
                if (polListLoader != null) {
                    polListLoader.disconnectProtocol();
                }
                policemanList = this.policemen;

                prepareCombo(); //připraví combo box
            }
        }
        javax.swing.SwingUtilities.invokeLater(new PolicemenListResender(policemen));
    }
}
